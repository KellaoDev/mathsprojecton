{"ast":null,"code":"import setValueForStyles from '../../modules/setValueForStyles';\nconst getRect = node => {\n  const height = node.offsetHeight;\n  const width = node.offsetWidth;\n  let left = node.offsetLeft;\n  let top = node.offsetTop;\n  node = node.offsetParent;\n  while (node && node.nodeType === 1) {\n    left += node.offsetLeft + node.clientLeft - node.scrollLeft;\n    top += node.offsetTop + node.clientTop - node.scrollTop;\n    node = node.offsetParent;\n  }\n  top -= window.scrollY;\n  left -= window.scrollX;\n  return {\n    width,\n    height,\n    top,\n    left\n  };\n};\nconst measureLayout = (node, relativeToNativeNode, callback) => {\n  const relativeNode = relativeToNativeNode || node && node.parentNode;\n  if (node && relativeNode) {\n    setTimeout(() => {\n      if (node.isConnected && relativeNode.isConnected) {\n        const relativeRect = getRect(relativeNode);\n        const {\n          height,\n          left,\n          top,\n          width\n        } = getRect(node);\n        const x = left - relativeRect.left;\n        const y = top - relativeRect.top;\n        callback(x, y, width, height, left, top);\n      }\n    }, 0);\n  }\n};\nconst elementsToIgnore = {\n  A: true,\n  BODY: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\nconst UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n  focus(node) {\n    try {\n      const name = node.nodeName;\n      if (node.getAttribute('tabIndex') == null && node.isContentEditable !== true && elementsToIgnore[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n      node.focus();\n    } catch (err) {}\n  },\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        const {\n          height,\n          left,\n          top,\n          width\n        } = getRect(node);\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n  updateView(node, props) {\n    for (const prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n      const value = props[prop];\n      switch (prop) {\n        case 'style':\n          {\n            setValueForStyles(node, value);\n            break;\n          }\n        case 'class':\n        case 'className':\n          {\n            node.setAttribute('class', value);\n            break;\n          }\n        case 'text':\n        case 'value':\n          node.value = value;\n          break;\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n  setLayoutAnimationEnabledExperimental() {}\n};\nexport default UIManager;","map":{"version":3,"names":["setValueForStyles","getRect","node","height","offsetHeight","width","offsetWidth","left","offsetLeft","top","offsetTop","offsetParent","nodeType","clientLeft","scrollLeft","clientTop","scrollTop","window","scrollY","scrollX","measureLayout","relativeToNativeNode","callback","relativeNode","parentNode","setTimeout","isConnected","relativeRect","x","y","elementsToIgnore","A","BODY","INPUT","SELECT","TEXTAREA","UIManager","blur","err","focus","name","nodeName","getAttribute","isContentEditable","setAttribute","measure","measureInWindow","onFail","onSuccess","updateView","props","prop","Object","prototype","hasOwnProperty","call","value","configureNextLayoutAnimation","config","onAnimationDidEnd","setLayoutAnimationEnabledExperimental"],"sources":["C:/Users/Kellao/Desktop/mathsprojecton-main/node_modules/react-native-web/src/exports/UIManager/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport setValueForStyles from '../../modules/setValueForStyles';\n\nconst getRect = (node) => {\n  const height = node.offsetHeight;\n  const width = node.offsetWidth;\n  let left = node.offsetLeft;\n  let top = node.offsetTop;\n  node = node.offsetParent;\n\n  while (node && node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n    left += node.offsetLeft + node.clientLeft - node.scrollLeft;\n    top += node.offsetTop + node.clientTop - node.scrollTop;\n    node = node.offsetParent;\n  }\n\n  top -= window.scrollY;\n  left -= window.scrollX;\n\n  return { width, height, top, left };\n};\n\nconst measureLayout = (node, relativeToNativeNode, callback) => {\n  const relativeNode = relativeToNativeNode || (node && node.parentNode);\n  if (node && relativeNode) {\n    setTimeout(() => {\n      if (node.isConnected && relativeNode.isConnected) {\n        const relativeRect = getRect(relativeNode);\n        const { height, left, top, width } = getRect(node);\n        const x = left - relativeRect.left;\n        const y = top - relativeRect.top;\n        callback(x, y, width, height, left, top);\n      }\n    }, 0);\n  }\n};\n\nconst elementsToIgnore = {\n  A: true,\n  BODY: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\n\nconst UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n\n  focus(node) {\n    try {\n      const name = node.nodeName;\n      // A tabIndex of -1 allows element to be programmatically focused but\n      // prevents keyboard focus. We don't want to set the tabindex value on\n      // elements that should not prevent keyboard focus.\n      if (\n        node.getAttribute('tabIndex') == null &&\n        node.isContentEditable !== true &&\n        elementsToIgnore[name] == null\n      ) {\n        node.setAttribute('tabIndex', '-1');\n      }\n      node.focus();\n    } catch (err) {}\n  },\n\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        const { height, left, top, width } = getRect(node);\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n\n  updateView(node, props) {\n    for (const prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      const value = props[prop];\n      switch (prop) {\n        case 'style': {\n          setValueForStyles(node, value);\n          break;\n        }\n        case 'class':\n        case 'className': {\n          node.setAttribute('class', value);\n          break;\n        }\n        case 'text':\n        case 'value':\n          // native platforms use `text` prop to replace text input value\n          node.value = value;\n          break;\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n\n  // mocks\n  setLayoutAnimationEnabledExperimental() {}\n};\n\nexport default UIManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}